一、程序的组成部分

Linux下程序大都是由以下几部分组成：

二进制文件：也就是可以运行的程序文件

库文件：就是通常我们见到的lib目录下的文件

配置文件：这个不必多说，都知道

帮助文档：通常是我们在Linux下用man命令查看的命令的文档

二、Linux下程序的存放目录

Linux程序的存放目录大致有三个地方：

/etc, /bin, /sbin, /lib  ：系统启动就需要用到的程序，这些目录不能挂载额外的分区，必须在根文件系统的分区上

/usr/bin,/usr/sbin,/usr/lib：操作系统核心功能，可以单独分区

/usr/local/bin,/usr/local/sbin,/usr/local/lib,/usr/local/etc,/usr/local/man：这个用于安装第三方程序，分别对应了二进制文件、库文件、配置文件、帮助文档的目录

通常来说我们安装程序就安装在 /usr/local目录下

　三、编译安装源程序

1、使用如下命令查看当前是否安装了gcc编译器，没有可以先用yum安装gcc

gcc --version  #查看是否安装gcc

2、解压源码包，例如：

tar -xvf nginx-1.7.7.tar.gz #解压源码包

3、进入解压好的源码包：

cd nginx-1.7.7 #进入源码包

4、执行configure文件，此文件有两个功能：1、让用户选定编译特性；2、检查编译环境。configure执行后将生成MakeFile文件。例如：

./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf

其中我们通过--prefix制定了安装路径，通过--conf-path制定了配置文件的具体位置。注意：不是所有的程序的configure参数都是一样的 可以使用 ./configure --help查看详细参数说明。如果该程序所依赖的库在当前系统中没有安装，则会导致configure最后报错，遇到这种情况就需要你先安装依赖库。

5、执行make命令，编译程序

make

6、编译成功后就可以安装了，执行如下命令

make install

到此程序就算安装完成了，但是不要忘了还有后续的配置哦

四、配置程序

1、修改PATH环境变量，以能够识别此程序的二进制文件路径；

修改/etc/profile文件，在文件中 添加

export PATH=$PATH:/path/to/somewhere#记得是可执行文件所在的目录，路径中不要包含可执行文件。

然后执行 ：

source /etc/profile #是我们的修改生效 　

2、默认情况下，系统搜索库文件的路径/lib, /usr/lib; 要增添额外搜寻路径(注意：有的程序不提供库文件，那就不需要此设置了)

在/etc/ld.so.conf.d/中创建以.conf为后缀名的文件，而后把要增添的路径直接写至此文件中；然后执行如下命令使其生效

ldconfig

3、如果程序提供了库文件，也会相应的提供头文件，一般在安装目录的include目录下，系统默认扫描头文件的路径是：/usr/include。我们可以在/usr/include下用链接连接到我们安装程序的头文件。

ln -s /usr/local/nginx/include  /usr/include/yourname

4、可能程序还提供了帮助文档，一般是安装目录下的man目录，为了我们可以使用man命令查看我们程序的帮助文档，我们需要：在/etc/man.config中添加一条MANPATH，指向我们的文档目录

*************************************************************
*************************************************************
tar zxvf XXXX.tar.gz (or tar jxvf XXXX.tar.bz2) 
#解压，最常见源码包的就两种(XXXX.tar.gz or XXXX.tar.bz2),其实这些源码包都是由2个工具压缩而成的，tar.gz结尾的文件用到的工具是tar和gunzip,而tar.bz2结尾的文件所使用的工具是tar和bzip2,之所以这样做是因为，tar仅仅能够打包多个文件但是没有压缩的功能，而gz和bz2却刚好相反，仅能够压缩单个文件，这样我们常见的源码包实际上是通过tar先将不同的源文件打包，然后再通过gunzip或者bzip2压缩后发布的

cd XXXX #进入到源码解压目录中

./configure #echo $?”来判定，如果是0，则表示上一步操作成功完成，否则就是没有成功
#解压完成就正式开始安装了(补充一点，开始configure之前，如有必要，请使用patch工具为源码打上相应的补丁),首先跳转到源码的解压目录，众所周知，开始configure前还是应该仔细阅读源码目录下的README或者INSTALL文件,好多安装中的注意事项在这里都有所罗列,configure实际上是一个脚本文件，在当前目录中键入"./configure",shell就会运行当前目录下的configure脚本，有一点必须说明，在整个configure过程，其实编译尚未进行，configure仅仅是做编译相关的准备工作，它主要对您当前的工作平台做一些依赖性检查，比如编译器是否安装，连接器是否存在，如果在检测的过程没有任何错误，你很幸运，configure脚本会在当前目录下生成下一步编译链接所要用到的另一个文件Makefile，当然configure支持及其丰富的命令行参数，可以键入"./configre --help"获取具体的信息,可以使用./configure --prefix=/opt/XXX  #它用来设置软件的安装目录

make
#如果configure过程正确完成，那么在源码目录，会生成相应的Makefile文件，Makefile文件简单来说包括的是一组文件依赖关系以及编译链接的相关步骤，事实上真正的编译链接工作也不是make所做的，make只是一个通用的工具，一般情况下，make会根据Makefile中的规则调用合适的编译器编译所有与当前软件相依赖的源码，生成所有相关的目标文件，最后再使用链接器生成最终的可执行程序

make install
#当上面两个步骤正确完成，代表着编译链接过程已经完全结束，最后要做的就是将可执行程序安装到正确的位置，在这个步骤，普通用户可能没有相关目录的操作权限，临时切换到root是一个不错的选择，"install"只是Makefile文件中的一个标号,"make install"代表着make工具执行Makefile文件中"install"标号下的所有相关操作，如果在configure阶段没有使用"--prefix=/opt/XXX"指定应用程序的安装目录，那么应用程序一般会被默认安装到/usr/local/bin，如果/usr/local/bin已经存在于您的PATH中，那么安装已经基本结束

make clean
make uninstall
#这两个步骤只是安装的后续操作，有一点必须注意，"clean"和"uninstall"也是Makefile文件中相应的两个标号，执行这两个步骤的时候Makefile文件必要保留，"make clean"用来清除编译连接过程中的一些临时文件，"make uninstall"是卸载相关应用程序，与make install类似，make uninstall也需要切换到root执行，不过"uninstall"标号在好多Makefile中都被省略掉了


*************************************************************
			Makefile文件组成
*************************************************************

Makefile文件保存了编译器和连接器的参数选项,还表述了所有源文件之间的关系(源代码文件需要的特定的包含文件,可执行文件要求包含的目标文件模块及库等).创建程序(make程序)首先读取makefile文件,然后再激活编译器,汇编器,资源编译器和连接器以便产生最后的输出,最后输出并生成的通常是可执行文件.创建程序利用内置的推理规则来激活编译器,以便通过对特定CPP文件的编译来产生特定的OBJ文件.
Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。
1、显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。 2、隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。
3、变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。
4、文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。
5、注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“\#”。
默认的情况下，make命令会在当前目录下按顺序找寻文件名为“GNUmakefile”、“makefile”、“Makefile”的文件，找到了解释这个文件。在这三个文件名中，最好使用“Makefile”这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。最好不要用 “GNUmakefile”，这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感，但是基本上来说，大多数的make都支持“makefile”和“Makefile”这两种默认文件名。
在Makefile使用include关键字可以把别的Makefile包含进来，这很像C语言的#include，被包含的文件会原模原样的放在当前文件的包含位置。include的语法是：
include <filename>; filename可以是当前操作系统Shell的文件模式（可以保含路径和通配符）